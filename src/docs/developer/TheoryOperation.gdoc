The resources plugin provides 4 primary elements to allow remapping and processing of resources.

# A set of servlet filters which provide responses to requests in the mapped URI subspace (MUS) of the application, normally <ctx>/static. 

# A set of mappers, invoked by the servlet filter, to modify and process resources.

# A domain specific language (DSL) for defining modules of resources which can be loaded by a page. 

# A tag library which provides appropriate links to processed resources.

h1. Types of Resources

From the perspective of the resources plugin, the resources accessed by the application can be divided into 3 classes:

# Declared resources are those which are accessed by URLs in the mapped URI subspace and belong to a declared module. Links to these are normally generated by resources plugin tags or by tags from other resources plugin aware tag libraries.

# Undeclared resources are those which are accessed by URLs in the mapped URI subspace but which do not belong to any module. Links to these are normally hard-coded and not generated by resources plugin tags or generated by other tag libraries which are not resources plugin aware.

# Ad-hoc, or legacy, resources are those accessed by URLs outside the mapped URI subspace.

h1. ResourceMeta entries.

Information about mapped resources is stored internally in [ResourceMeta|api:org.grails.plugin.resource] objects. Subclasses of this type represent different types of resources which can be accessed in the MUS, such as bundles of CSS files ([CSSBundleResourceMeta|api:org.grails.plugin.resource]).
The ResourceMeta objects are stored in an a mapping from the URI to the ResourceMeta, a singleton instance of [ResourceMetaStore|api:org.grails.plugin.resource.util].

h1. Servlet filters.

The resources plugin operates on incoming requests by inserting up to three filters into the Spring servlet filter chain. The first is an instance of [ProcessingFilter|api:org.grails.plugin.resource] as a filter in the Spring servlet filter chain. It is inserted after the springSecurityFilterChain (if in use) and the sitemesh filters. It is inserted prior to the charEncodingFilter and urlMapping filters. It is mapped to intercept all requests in the MUS, as set by the 

h1. ResourceProcessor.

This is the main class which processes resources for the [ProcessingFilter|api:org.grails.plugin.resource]. 